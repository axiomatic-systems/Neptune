import os
import re
import sys
import platform

ANDROID_NDK_ROOT=os.getenv('ANDROID_NDK_ROOT')
if not ANDROID_NDK_ROOT:
    raise Exception('ANDROID_NDK_ROOT environment variable not set')

if ARGUMENTS.get('android_toolchain'):
    ANDROID_TOOLCHAIN=ARGUMENTS.get('android_toolchain')
else:
    ANDROID_TOOLCHAIN='arm-eabi-4.4.0'

if ARGUMENTS.get('android_cross_prefix'):
    ANDROID_CROSS_PREFIX=ARGUMENTS.get('android_cross_prefix')
else:
    ANDROID_CROSS_PREFIX='arm-eabi'

if ARGUMENTS.get('android_platform'):
    ANDROID_PLATFORM=ARGUMENTS.get('android_platform')
else:
    ANDROID_PLATFORM='android-3'

if ARGUMENTS.get('android_arch'):
    ANDROID_ARCH=ARGUMENTS.get('android_arch')
else:
    ANDROID_ARCH='arm'

if env.has_key('android_host_system') and env['android_host_system']:
	ANDROID_HOST_SYSTEM = env['android_host_system']
else:
	PLATFORM_TO_TARGET_MAP = { 
    	'linux-i386' : 'linux-x86',
    	'linux2'     : 'linux-x86',
    	'win32'      : 'windows',
    	'cygwin'     : 'windows',
    	'darwin'     : 'darwin-x86'
	}
	if sys.platform in PLATFORM_TO_TARGET_MAP:
		ANDROID_HOST_SYSTEM = PLATFORM_TO_TARGET_MAP[sys.platform]
	else:
		raise Exception('Android Host Platform cannot be determined')
		
print 'Building for Android: '
print 'ANDROID_HOST_SYSTEM =', ANDROID_HOST_SYSTEM
print 'ANDROID_TOOLCHAIN   =', ANDROID_TOOLCHAIN
print 'ANDROID_PLATFORM    =', ANDROID_PLATFORM
print 'ANDROID_ARCH        =', ANDROID_ARCH

ANDROID_TOOLCHAIN_BIN = ANDROID_NDK_ROOT+'/toolchains/'+ANDROID_TOOLCHAIN+'/prebuilt/'+ANDROID_HOST_SYSTEM+'/bin'
ANDROID_SYSROOT = ANDROID_NDK_ROOT+'/platforms/'+ANDROID_PLATFORM+'/arch-'+ANDROID_ARCH

### add the tools to the path
env.PrependENVPath('PATH', ANDROID_TOOLCHAIN_BIN)

### special C Runtime startup for executables
env['NPT_EXTRA_EXECUTABLE_OBJECTS'] = [ANDROID_SYSROOT+'/usr/lib/crtbegin_static.o',
                                       ANDROID_SYSROOT+'/usr/lib/crtend_android.o']


### Load the tools
LoadTool('gcc-generic', env, gcc_cross_prefix=ANDROID_CROSS_PREFIX, gcc_strict=False)
env.AppendUnique(CCFLAGS = ['-I'+ANDROID_NDK_ROOT+'/sources/cxx-stl/system/include' , 
                            '--sysroot', ANDROID_SYSROOT,
                            '-msoft-float',
                            '-fpic',
                            '-mthumb-interwork',
                            '-ffunction-sections',
                            '-funwind-tables',
                            '-fstack-protector',
                            '-fno-short-enums'])
env.AppendUnique(CXXFLAGS = ['-fno-exceptions', '-fno-rtti'])
env.AppendUnique(CPPDEFINES = ['ANDROID', 'NPT_CONFIG_HAVE_SYSTEM_LOG_CONFIG'])
env.AppendUnique(LINKFLAGS = ['-Bdynamic',
                			  '-Wl,--no-undefined', 
                			  '-Wl,-rpath=/system/lib',
                              '-Wl,--dynamic-linker=/system/bin/linker',
                              '-Wl,-rpath-link=' + ANDROID_SYSROOT + '/usr/lib',
                              '-nostdlib', 
                			  '-L'+ANDROID_SYSROOT+'/usr/lib', 
                			  '-lc', 
                			  '-lstdc++', 
                			  '-lm', 
                			  '-llog', 
                			  '-ldl'])

### Specific System choices
env['NPT_SYSTEM_SOURCES']={'System/StdC':'NptStdc[!D]*.cpp',
                           'System/Bsd':'*.cpp',
                           'System/Posix':'*.cpp',
                           'System/Null':'NptNullSerialPort.cpp',
                           'System/Android':'*.cpp'}
